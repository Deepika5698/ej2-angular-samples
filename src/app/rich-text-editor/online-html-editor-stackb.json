{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Rich Text Editor - Online HTML Editor Sample\n */\nimport { Component, ViewChild, ViewEncapsulation, OnInit, Inject } from '@angular/core';\nimport { createElement } from '@syncfusion/ej2-base';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\nimport { ToolbarService, LinkService, ImageService, TableService, HtmlEditorService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { RichTextEditorComponent, ToolbarType } from '@syncfusion/ej2-angular-richtexteditor';\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\n\n@Component({\n    selector: 'app-root',\n    encapsulation: ViewEncapsulation.None,\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    providers: [ToolbarService, LinkService, ImageService, HtmlEditorService, TableService]\n})\nexport class AppComponent {\n    @ViewChild('defaultRTE', { static: false })\n    public rteObj: RichTextEditorComponent;\n\n    public myCodeMirror: any;\n    public srcArea: HTMLElement;\n    public textArea: HTMLElement;\n\n    public tools: ToolbarModule = {\n        type: ToolbarType.MultiRow,\n        items: ['Bold', 'Italic', 'Underline', 'StrikeThrough',\n            'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\n            'LowerCase', 'UpperCase','SuperScript', 'SubScript', '|',\n            'Formats', 'Alignments', 'NumberFormatList', 'BulletFormatList',\n            'Outdent', 'Indent', '|',\n            'CreateTable', 'CreateLink', 'Image', 'FileManager', '|', 'ClearFormat', 'Print',\n            'SourceCode', 'FullScreen', '|', 'Undo', 'Redo']\n    };\n\n    constructor() {\n        \n    }\n\n    ngOnInit() {\n        // Add the styles and script referrence for code-mirror.\n        let link = document.createElement('link');\n        link.setAttribute('rel', 'stylesheet');\n        link.setAttribute('type', 'text/css');\n        link.setAttribute('href', 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.min.css');\n        document.head.appendChild(link);\n\n        let elem1 = document.createElement('script');\n        elem1.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js';\n        elem1.type = 'text/javascript';\n        document.head.appendChild(elem1);\n\n        let elem2 = document.createElement('script');\n        elem2.src = 'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js';\n        elem2.type = 'text/javascript';\n        document.head.appendChild(elem2);\n        let URL = location.href.replace(location.search,'');\n        document.getElementById('newTab').setAttribute('href', URL.split('#')[0] + 'rich-text-editor/online-html-editor');\n    }\n\n    public updateHtmlValue(): void {\n        this.textArea.innerHTML = this.myCodeMirror.getValue();\n    }\n\n    public renderCodeMirror(mirrorView: HTMLElement, content: string): void {\n        if (content) {\n            this.myCodeMirror = CodeMirror(mirrorView, {\n                value: content,\n                lineNumbers: true,\n                mode: 'text/html',\n                lineWrapping: true,\n            });\n        }\n    }\n\n    public onCreate(): void {\n        setTimeout(() => {\n            this.rteObj.refreshUI();\n            this.updateValue();\n            this.textArea = this.rteObj.contentModule.getEditPanel() as HTMLElement;\n            this.srcArea = document.querySelector('.source-code');\n            if (this.srcArea) {\n                this.srcArea.addEventListener('keyup', this.updateHtmlValue.bind(this));\n            }\n        }, 400);\n    }\n\n    public onChange(): void {\n        this.updateValue();\n    }\n\n    public updateValue(): void {\n        let mirrorView: HTMLElement = document.querySelector('#src-view');\n        if (!mirrorView) {\n          mirrorView = createElement('div', {\n            className: 'e-content'\n          });\n          mirrorView.id = 'src-view';\n          let srcCodeElement: HTMLElement = document.querySelector('.source-code');\n          if (srcCodeElement) {\n            srcCodeElement.appendChild(mirrorView);\n          }\n          mirrorView.innerHTML = '';\n          mirrorView.style.display = 'block';\n        }\n        let srcViewEle: HTMLElement = document.querySelector('#src-view');\n        let codemirrorEle: HTMLElement = document.querySelector('.CodeMirror-wrap');\n        if (codemirrorEle) {\n          codemirrorEle.remove();\n        }\n        this.renderCodeMirror(srcViewEle, this.rteObj.value);\n    }\n}\n","app/app.module.ts":"import { SwitchModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { TabModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonModule} from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SplitterModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule,TabModule,       RichTextEditorAllModule, SplitterModule, CheckBoxModule, DialogModule, NumericTextBoxModule,ButtonModule,SwitchModule, RadioButtonModule, TextBoxModule, DropDownListModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<div class=\"control-section\">\n    <div class=\"sample-container online-editor\">\n        <div class=\"default-section\">\n            <div class='button-content'>\n                <div class=\"col-lg-12 col-sm-12 col-md-12 center\">\n                    Click/Touch the button to view the sample\n                </div>\n                <div class=\"col-lg-12 col-sm-12 col-md-12 center\">\n                    <a class=\"e-btn\" id=\"newTab\" target=\"_blank\">Open in new tab</a>\n                </div>\n            </div>\n            <div class=\"sample-view\">\n                <h3 class=\"title-head\">Rich Text Editor Online Html Editor</h3>\n                <div class=\"heading\">\n                    <h6 class=\"title\"><b>PREVIEW</b> </h6>\n                </div>\n                <div class=\"heading right\">\n                    <h6 class=\"title\"><b>HTML SOURCE CODE </b></h6>\n                </div>\n                <ejs-splitter height='450px' width='100%'>\n                    <e-panes>\n                        <e-pane size='50%' [resizable]='false' cssClass='pane1'>\n                            <ng-template #content>\n                                <div class=\"content\">\n                                    <ejs-richtexteditor id=\"defaultRTE\" #defaultRTE height='447px' [toolbarSettings]='tools' saveInterval='1' [showCharCount]='true' maxLength='5000'\n                                        (created)='onCreate()' (change)='onChange()' (actionComplete)='updateValue()'>\n                                        <ng-template #valueTemplate>\n                                            <p>The Rich Text Editor is a WYSIWYG (what you see is what you get) editor used to create and edit\n                                                the content and return the valid HTML markup or markdown of the content.\n                                                This provides a lot of commands to edit and format the content. </p>\n                                            <p><b>Toolbar</b></p>\n                                            <p>The editor’s toolbar provides various commands to align the text, format, insert a link, image,\n                                                list, undo/redo operations, HTML view, and more. The toolbar comes with different modes such as\n                                                floating, multi-row, and expanded. </p>\n                                            <p><b>Links</b></p>\n                                            <p>Create a hyperlink using the 'insert link' dialog and you can edit the hyperlink text, display text,\n                                                and tooltip using the 'edit link' dialog and quick toolbar. If the text has valid hyperlink text,\n                                                the editor converts it to hyperlink automatically. For example, link to Rich Text Editor.</p>\n                                            <p><b>Table</b></p>\n                                            <p>This editor allows you to insert a table with options to add, edit, and remove and perform other\n                                                table-related actions. </p>\n                                            <p>For example</p>\n                                            <table>\n                                                <tbody>\n                                                    <tr>\n                                                        <th>Employee name</th>\n                                                        <th>Role</th>\n                                                        <th>Mail</th>\n                                                        <th>Country</th>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Janet Fleet</td>\n                                                        <td>Manager</td>\n                                                        <td>janet95@arpy.com</td>\n                                                        <td>France</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Nancy Buchanan</td>\n                                                        <td>Project Lead</td>\n                                                        <td>nancy55@rpy.com</td>\n                                                        <td>Sweden</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Rose Rose</td>\n                                                        <td>Project Lead</td>\n                                                        <td>rose44@sample.com</td>\n                                                        <td>France</td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                            <p><b>Image</b></p>\n                                            <p>Allows you to insert images with caption, alt text, link, resize, and drag-and-drop from an\n                                                online source and local computer. You can upload an image to the server and insert it into the editor.\n                                                It provides an option to customize a quick toolbar for an image.</p>\n                                            <p>For example</p>\n                                            <img id='rteImageID' style=\"height:300px;transform: rotate(0deg);\" alt=\"Logo\"\n                                                src=\"./assets/rich-text-editor/images/RTEImage-Feather.png\" />\n                                            <p><b>Lists</b></p>\n                                            <p>You can include content with ordered and unordered lists.</p>\n                                            <p>Examples for an ordered list:</p>\n                                            <ul>\n                                                <li>TypeScript</li>\n                                                <li>Javascript</li>\n                                                <li>Angular</li>\n                                                <li>React</li>\n                                                <li>Vue</li>\n                                            </ul>\n                                            <p>Examples for an unordered list:</p>\n                                            <ol>\n                                                <li>Rich Text Editor</li>\n                                                <li>Toolbar</li>\n                                                <li>Button</li>\n                                                <li>Dialog</li>\n                                                <li>Data Grid</li>\n                                            </ol>\n                                            <p>The editor has a lot of features to edit HTML content and Markdown content in web applications.</p>\n                                        </ng-template>\n                                    </ejs-richtexteditor>\n                                </div>\n                            </ng-template>\n                        </e-pane>\n                        <e-pane cssClass='pane2'>\n                            <ng-template #content>\n                                <div class=\"content\">\n                                    <div class=\"splitter-default-content source-code pane2\" contenteditable=\"true\"></div>\n                                </div>\n                            </ng-template>\n                        </e-pane>\n                    </e-panes>\n                </ejs-splitter>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".online-editor #defaultRTE {\n    overflow: hidden;\n    border: none;\n}\n\n.online-editor .e-splitter .CodeMirror {\n    height: 447px;\n}\n\n.center {\n    text-align: center;\n    font-size: 13px;\n    font-weight: 400;\n    margin-top: 20px;\n}\n\n.online-editor .heading {\n    margin-top: 10px;\n    float: left;\n    width: 50%;\n    border: 1px solid #e8e8e8;\n    border-bottom: none;\n    position: relative;\n    box-sizing: border-box;\n    padding: 5px;\n}\n\n.title {\n    color: #a0aabf;\n    letter-spacing: 1px;\n    padding-left: 10px;\n}\n\n.online-editor .title-head {\n    text-align: center\n}\n\n.online-editor .e-control.e-splitter .e-split-bar.e-split-bar-horizontal.e-last-bar {\n    margin: 0;\n}\n\n.online-editor .button-content {\n    display: none;\n}\n\n.sb-content-section .online-editor .button-content {\n    display: block;\n}\n\n.sb-content-section .online-editor .sample-view {\n    display: none;\n}\n\n.online-editor .sample-view {\n    display: block;\n    padding: 15px;\n}\n\nbody {\n    margin: 0;\n}\n\n.online-editor table {\n    width: 100%\n}\n\n.online-editor table,\n.online-editor th,\n.online-editor td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\n\n.ej2-new .sb-bread-crumb,\n.ej2-new .sb-bread-crumb-text,\n.ej2-new app-root > div > p,\n.ej2-new #action-description,\n.ej2-new #description-section,\n.ej2-new .sb-header,\n.ej2-new #description {\n    display: none !important;\n}\n\n.ej2-new .container-fluid {\n    padding: 0 !important;\n}\n\n.ej2-new .content {\n    top : 0px;\n}\n\n.ej2-new .e-splitter .content {\n    height: 100%;\n}\n\n.ej2-new .control-section {\n    padding-left: 0px;\n}"}