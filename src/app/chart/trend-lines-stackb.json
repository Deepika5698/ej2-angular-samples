{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ChartComponent, ILoadedEventArgs,ChartTheme, TrendlineTypes, LegendSettingsModel } from '@syncfusion/ej2-angular-charts';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { NumericTextBox } from '@syncfusion/ej2-inputs';\n/**\n * Sample for trendlines\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    public series1: Object[] = this.getData();\n    public point1: Object;\n    public getData(): Object[] {\n        let pointCollection: Object[] = [];\n        let point1: Object;\n        let yValue: number[] = [7.66, 8.03, 8.41, 8.97, 8.77, 8.20, 8.16, 7.89, 8.68, 9.48, 10.11, 11.36, 12.34, 12.60, 12.95,\n        13.91, 16.21, 17.50, 22.72, 28.14, 31.26, 31.39, 32.43, 35.52, 36.36,\n        41.33, 43.12, 45.00, 47.23, 48.62, 46.60, 45.28, 44.01, 45.17, 41.20, 43.41, 48.32, 45.65, 46.61, 53.34, 58.53];\n        let i: number; let j: number = 0;\n        for (i = 1973; i <= 2013; i++) {\n            point1 = { x: i, y: yValue[j] };\n            pointCollection.push(point1);\n            j++;\n        }\n        return pointCollection;\n    }\n\n    public powerData: Object[] = [\n        { x: 1, y: 10 }, { x: 2, y: 50 }, { x: 3, y: 80 }, { x: 4, y: 110 },\n        { x: 5, y: 180 }, { x: 6, y: 220 }, { x: 7, y: 300 }, { x: 8, y: 370 }, { x: 9, y: 490 }, { x: 10, y: 500 }\n    ];\n\n    @ViewChild('chart')\n    public chart: ChartComponent;\n    @ViewChild('forwardForecast')\n    public forwardForecast: NumericTextBox;\n    @ViewChild('backwardForecast')\n    public backwardForecast: NumericTextBox;\n    @ViewChild('polynomialOrder')\n    public polynomialOrder: NumericTextBox;\n    @ViewChild('period')\n    public period: NumericTextBox;\n    public checkForwardForecast(e: Event): void {\n        this.chart.series[0].trendlines[0].forwardForecast = this.forwardForecast.value;\n        this.chart.series[0].animation.enable = false;\n        this.chart.refresh();\n    }\n    public checkBackwardForecast(e: Event): void {\n        this.chart.series[0].trendlines[0].backwardForecast = this.backwardForecast.value;\n        this.chart.series[0].animation.enable = false;\n        this.chart.refresh();\n    }\n    public checkPolynomialOrder(e: Event): void {\n        this.chart.series[0].trendlines[0].polynomialOrder = this.polynomialOrder.value;\n        this.chart.series[0].animation.enable = false;\n        this.chart.refresh();\n    }\n    public checkPeriod(e: Event): void {\n        this.chart.series[0].trendlines[0].period = this.period.value;\n        this.chart.series[0].animation.enable = false;\n        this.chart.refresh();\n    }\n    //Initializing Primary X Axis\n    public primaryXAxis: Object = {\n        majorGridLines: { width : 0}, edgeLabelPlacement: 'Shift'\n    };\n    //Initializing Primary Y Axis\n    public primaryYAxis: Object = {\n       title: 'Rupees against Dollars',\n       interval: 10, lineStyle: {width: 0}, majorTickLines: { width: 0 }\n    };\n    public chartArea : Object = {\n      border: { width : 0}\n    };\n    public tooltip: Object = {\n        enable: false\n    };\n    public marker: object = {\n        visible: false\n    };\n    public marker1: Object = {\n        visible :true\n    }\n    public legendSettings: LegendSettingsModel = { visible: true };\n    public min: number = 1;\n    public max: number = 20;\n    public value: number = 0;\n    public step: number = 1;\n     // custom code start\n     public load(args: ILoadedEventArgs): void {       \n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\n    };\n     // custom code end\n    public title: string = 'Historical Indian Rupee Rate (INR USD)';\n    public trendLineType: DropDownList;\n    ngOnInit(): void {\n        this.trendLineType = new DropDownList({\n            index: 0,\n            width: 120,\n            change: () => {\n                let type: string = this.trendLineType.value.toString();\n                this.chart.series[0].dataSource = [];\n                this.chart.series[0].trendlines[0].type = <TrendlineTypes>type;\n                this.chart.series[0].trendlines[0].name = <TrendlineTypes>type;\n                let forwardForecast: boolean; let backwardForecast: boolean; let polynomialOrder: boolean; let period: boolean;\n                if (type !== 'Power') {\n                    this.chart.series[0].dataSource = this.series1;\n                    this.chart.series[0].name = 'Rupees';\n                    this.chart.primaryXAxis.title = '';\n                    this.chart.primaryYAxis.interval = 10;\n                    this.chart.primaryYAxis.title = 'Rupees against Dollars';\n                    this.chart.title = 'Historical Indian Rupee Rate (INR USD)';\n                    if (type === 'MovingAverage') {\n                        this.chart.series[0].trendlines[0].marker.visible = false; }\n                } else {\n                    this.chart.series[0].dataSource = this.powerData;\n                    this.chart.series[0].name = 'Meters';\n                    this.chart.primaryXAxis.title = 'Seconds';\n                    this.chart.primaryYAxis.title = 'Meters';\n                    this.chart.primaryYAxis.interval = 100;\n                    this.chart.title = 'Distance Measurement';\n                }\n                if (type !== 'Polynomial' && type !== 'MovingAverage') {\n                    period = polynomialOrder = false;\n                    forwardForecast = backwardForecast = true;\n                } else if (type === 'MovingAverage') {\n                    period = true;\n                    forwardForecast = backwardForecast = polynomialOrder = false;\n                } else {\n                    forwardForecast = backwardForecast = polynomialOrder = true;\n                    period = false;\n                }\n                this.forwardForecast.enabled = forwardForecast;\n                this.backwardForecast.enabled = backwardForecast;\n                this.polynomialOrder.enabled = polynomialOrder;\n                this.period.enabled = period;\n                this.chart.refresh();\n            }\n        });\n        this.trendLineType.appendTo('#trendLineType');\n    }\n    constructor() {\n        //code\n    };\n\n}","app/app.module.ts":"import { DashboardLayoutModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { ChartAllModule, AccumulationChartAllModule, RangeNavigatorAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DatePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ ChartAllModule, RangeNavigatorAllModule, BrowserModule, ButtonModule, AccumulationChartAllModule, NumericTextBoxModule, DatePickerModule, DropDownListAllModule, DashboardLayoutModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-lg-8\">\n        <ejs-chart #chart id='chartcontainer' style='display:block; width: 92%' [primaryXAxis]='primaryXAxis' [primaryYAxis]='primaryYAxis' [tooltip]='tooltip' [chartArea]='chartArea' [title]='title' [legendSettings]='legendSettings' (load)='load($event)'>\n            <e-series-collection>\n                <e-series [dataSource]='series1' type='Spline' xName='x' yName='y' name='Rupees' [marker]='marker1'>\n                    <e-trendlines>\n                        <e-trendline type='Linear' width=3 [marker]='marker' name='Trends' fill='#C64A75'>\n                        </e-trendline>\n                    </e-trendlines>\n                </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%\">\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 50%\">\n                            <div>TrendLine Type:\n                            </div>\n                        </td>\n                        <td style=\"width: 50%;padding-left: 10px; padding-right: 10px\">\n                            <div>\n                                <select id=\"trendLineType\" style=\"margin-left: -5px\">\t\t\t\t \n                                    <option value= \"Linear\">Linear</option>\n                                    <option value= \"Exponential\">Exponential</option>\n                                    <option value= \"Power\">Power</option>\n                                    <option value= \"Logarithmic\">Logarithmic</option>\n                                    <option value = \"Polynomial\">Polynomial</option>\n                                    <option value= \"MovingAverage\">Moving Average</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr id='' style=\"height: 50px\">\n                        <td style=\"width: 80%\">\n                            <div> Forward Forecast:</div>\n                        </td>\n                        <td style=\"width: 20%;padding-left: 10px; padding-right: 10px\">\n                            <div class=\"control-label\">\n                                <ejs-numerictextbox #forwardForecast id=\"forwardForecast\" [value]=\"value\" [min]=\"min\" [max]=\"max\" [step]=\"step\" width=120 (change)='checkForwardForecast($event)'></ejs-numerictextbox>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr id='' style=\"height: 50px\">\n                        <td style=\"width: 80%\">\n                            <div>Backward Forecast:</div>\n                        </td>\n                        <td style=\"width: 20%;padding-left: 10px; padding-right: 10px\">\n                            <div class=\"control-label\">\n                                <ejs-numerictextbox #backwardForecast id=\"backwardForecast\" [value]=\"value\" [min]=\"min\" [max]=\"max\" [step]=\"step\" width=120 (change)='checkBackwardForecast($event)'></ejs-numerictextbox>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr id='' style=\"height: 50px\">\n                        <td style=\"width: 80%\">\n                            <div>Polynomial Order:</div>\n                        </td>\n                        <td style=\"width: 20%;padding-left: 10px; padding-right: 10px\">\n                            <div class=\"control-label\">\n                                <ejs-numerictextbox #polynomialOrder id=\"polynomialOrder\" [value]=\"value\" [min]=\"min\" [max]=\"max\" [step]=\"step\" width=120 (change)='checkPolynomialOrder($event)' disabled=true></ejs-numerictextbox>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr id='' style=\"height: 50px\">\n                        <td style=\"width: 80%\">\n                            <div>Period:</div>\n                        </td>\n                        <td style=\"width: 20%;padding-left: 10px; padding-right: 10px\">\n                            <div class=\"control-label\">\n                                <ejs-numerictextbox #period id=\"period\" [value]=\"value\" [min]=\"min\" [max]=\"max\" [step]=\"step\" width=120 (change)='checkPeriod($event)' disabled=true></ejs-numerictextbox>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n    \n    #chartcontainer_Series_0_TrendLine_0 {\n        stroke-dasharray: 10;\n        -webkit-animation: dash 1s linear infinite;\n        animation: dash 1s linear infinite;\n    }\n    \n    @keyframes dash {\n        to {\n            stroke-dashoffset: -20;\n        }\n    }\n</style>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}