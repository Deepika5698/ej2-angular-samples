{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { ILoadedEventArgs, ChartComponent, IPointRenderEventArgs } from '@syncfusion/ej2-angular-charts';\nimport { ErrorBarMode, ErrorBarDirection, ErrorBarType, ChartTheme } from '@syncfusion/ej2-charts';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { NumericTextBox } from '@syncfusion/ej2-angular-inputs'\n\n/**\n * Sample for Error bar \n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    public data: Object[] = [\n        { x: 'IND', y: 24 }, { x: 'AUS', y: 20 }, { x: 'USA', y: 35 },\n        { x: 'DEU', y: 27 }, { x: 'ITA', y: 30 },\n        { x: 'UK', y: 41 }, { x: 'RUS', y: 26 }\n    ];\n    //Initializing Primary X Axis\n    public primaryXAxis: Object = {\n        valueType: 'Category', interval: 1, majorGridLines: { width: 0 }, majorTickLines: {width : 0},\n        minorTickLines: {width: 0},\n    };\n    public pointRender(args: IPointRenderEventArgs): void {\n        let materialColors: string[] = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883', '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb',\n            '#ea7a57', '#404041', '#00bdae'];\n        let fabricColors: string[] = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',\n            '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300', '#4472c4', '#70ad47', '#ffc000', '#ed7d31'];\n        let bootstrapColors: string[] = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6',\n            '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\n        let highContrastColors: string[] = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773', '#BA98FF',\n            '#FA83C3', '#00C27A', '#43ACEF', '#D681EF', '#D8BC6E'];\n        let fluentColors: string[] = ['#614570', '#4C6FB1', '#CC6952', '#3F579A', '#4EA09B', '#6E7A89', '#D4515C', '#E6AF5D', '#639751',\n            '#9D4D69'];\n        let fluentDarkColors: string[] = ['#8AB113', '#2A72D5', '#43B786', '#584EC6', '#E85F9C', '#6E7A89', '#EA6266', '#EBA844', '#26BC7A', \n            '#BC4870'];     \n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n            args.fill = fabricColors[args.point.index % 10];\n        } else if (selectedTheme === 'material') {\n            args.fill = materialColors[args.point.index % 10];\n        } else if (selectedTheme === 'highcontrast') {\n            args.fill = highContrastColors[args.point.index % 10];\n        }  else if (selectedTheme === 'fluent') {\n            args.fill = fluentColors[args.point.index % 10];\n        } else if (selectedTheme === 'fluent-dark') {\n            args.fill = fluentDarkColors[args.point.index % 10];\n        } else {\n            args.fill = bootstrapColors[args.point.index % 10];\n        }\n    };\n       // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\n    };\n       // custom code end\n    //Initializing Primary Y Axis\n    public primaryYAxis: Object = {\n        labelFormat: '{value}%', lineStyle: { width: 0 }, minimum: 15, maximum: 45\n    };\n    public legend: Object = {\n        visible: false\n    };\n    public chartArea: Object = { border: { width: 0 } }; \n    public title: string = 'Sales Distribution of Car by Region';\n    public errorBar: Object = { visible: true, verticalError: 3, horizontalError: 3 };\n    public marker: Object = { height: 10, width: 10 };\n    public tooltip: Object = { enable: true };\n    @ViewChild('chart')\n    public chart: ChartComponent;\n    public errorBarVisible(e: Event): void {\n        let element: HTMLInputElement = <HTMLInputElement>e.target;\n        this.chart.series[0].errorBar.visible = element.checked;\n        this.chart.series[0].animation.enable = false;\n        this.chart.refresh();\n    }\n    public verticalError(e: Event): void {\n        this.chart.series[0].errorBar.verticalError = this.verticalerror.value;\n        this.chart.series[0].animation.enable = false;\n        this.chart.refresh();\n    };\n    public horizontalError(e: Event): void {\n        this.chart.series[0].errorBar.horizontalError = this.horizontalerror.value;\n        this.chart.series[0].animation.enable = false;\n        this.chart.refresh();\n    };\n    @ViewChild('verror')\n    public verticalerror: NumericTextBox;\n    @ViewChild('herror')\n    public horizontalerror: NumericTextBox;\n    public min: number = 1;\n    public max: number = 20;\n    public value: number = 3;\n    public step: number = 1;\n    public errorBarType: DropDownList;\n    public errorBarDirection: DropDownList;\n    public errorBarMode: DropDownList;\n    ngOnInit(): void {\n        this.errorBarType = new DropDownList({\n            index: 0,\n            width: 120,\n            change: () => {\n                let type: string = this.errorBarType.value.toString();\n                this.chart.series[0].errorBar.type = <ErrorBarType>type;\n                this.chart.series[0].animation.enable = false;\n                this.chart.refresh();\n            }\n        });\n        this.errorBarType.appendTo('#errorBarType');\n        this.errorBarMode = new DropDownList({\n            index: 0,\n            width: 120,\n            change: () => {\n                let mode: string = this.errorBarMode.value.toString();\n                this.chart.series[0].errorBar.mode = <ErrorBarMode>mode;\n                this.chart.series[0].animation.enable = false;\n                this.chart.refresh();\n            }\n        });\n        this.errorBarMode.appendTo('#drawmode');\n        this.errorBarDirection = new DropDownList({\n            index: 0,\n            width: 120,\n            change: () => {\n                let direction: string = this.errorBarDirection.value.toString();\n                this.chart.series[0].errorBar.direction = <ErrorBarDirection>direction;\n                this.chart.series[0].animation.enable = false;\n                this.chart.refresh();\n            }\n        });\n        this.errorBarDirection.appendTo('#direction');\n    }\n    constructor() {\n        // code\n    };\n}","app/app.module.ts":"import { DashboardLayoutModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { ChartAllModule, AccumulationChartAllModule, RangeNavigatorAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DatePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ ChartAllModule, RangeNavigatorAllModule, BrowserModule, ButtonModule, AccumulationChartAllModule, NumericTextBoxModule, DatePickerModule, DropDownListAllModule, DashboardLayoutModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-md-8\">\n        <ejs-chart #chart style='display:block;width:92%' id='chartcontainer' [primaryXAxis]='primaryXAxis' [primaryYAxis]='primaryYAxis' [title]='title' (pointRender)='pointRender($event)' [legendSettings]='legend' [tooltip]='tooltip' [chartArea]='chartArea' (load)='load($event)'>\n            <e-series-collection>\n                <e-series [dataSource]='data' type='Scatter' xName='x' yName='y' [marker]='marker' [errorBar]='errorBar' name='Sales'>\n                </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%\">\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 60%\">\n                            <div>Error Bar Type:</div>\n                        </td>\n                        <td style=\"width: 40%;padding-left: 10px; padding-right: 10px\">\n                            <div>\n                                <select name=\"ErrorBarType\" autocomplete=\"off\" id=\"errorBarType\" style=\"width: 60%;margin-left: -5px\">\n                                    <option value=\"Fixed\">Fixed</option>\n                                    <option value=\"Percentage\">Percentage</option>\n                                    <option value=\"StandardDeviation\">StandardDeviation</option>\n                                    <option value=\"StandardError\">StandardError</option>\n                                    <option value=\"Custom\">Custom</option>\n                                         </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 60%\">\n                            <div>Drawing Mode:</div>\n                        </td>\n                        <td style=\"width: 40%;padding-left: 10px; padding-right: 10px\">\n                            <div>\n                                <select name=\"DrawingMode\" autocomplete=\"off\" id=\"drawmode\" style=\"margin-left: -5px\">\n                                    <option value=\"Vertical\">Vertical</option>\n                                    <option value=\"Horizontal\">Horizontal</option>\n                                    <option value=\"Both\">Both</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 60%\">\n                            <div>Drawing Direction:</div>\n                        </td>\n                        <td style=\"width: 40%;padding-left: 10px; padding-right: 10px\">\n                            <div>\n                                <select name=\"Direction\" autocomplete=\"off\" id=\"direction\" style=\"margin-left: -5px\">\n                                    <option value=\"Both\">Both</option>\n                                    <option value=\"Minus\">Minus</option>\n                                    <option value=\"Plus\">Plus</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 60%\">\n                            <div>Vertical Error:</div>\n                        </td>\n                        <td style=\"width: 40%;padding-left: 10px; padding-right: 10px\">\n                            <div class=\"control-label\">\n                                <ejs-numerictextbox #verror [value]=\"value\" [min]=\"min\" [max]=\"max\" [step]=\"step\" (change)='verticalError($event)'></ejs-numerictextbox>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 60%\">\n                            <div>Horizontal Error:</div>\n                        </td>\n                        <td style=\"width: 40%;padding-left: 10px; padding-right: 10px\">\n                            <div class=\"control-label\">\n                                <ejs-numerictextbox #herror [value]=\"value\" [min]=\"min\" [max]=\"max\" [step]=\"step\" (change)='horizontalError($event)'></ejs-numerictextbox>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}