{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, TemplateRef } from '@angular/core';\nimport { isNullOrUndefined } from \"@syncfusion/ej2-base\";\nimport {\n    TreeViewComponent, DragAndDropEventArgs, TabComponent, DragEventArgs\n} from '@syncfusion/ej2-angular-navigations';\nimport {\n    EventSettingsModel, DayService, WeekService, WorkWeekService,\n    MonthService, AgendaService\n} from '@syncfusion/ej2-angular-schedule';\nimport { DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';\nimport { CategoryService, LineSeriesService } from '@syncfusion/ej2-angular-charts';\n\n\n/**\n * Draggable Tab Component\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    providers: [DayService, WeekService, WorkWeekService, MonthService, AgendaService, CategoryService, LineSeriesService],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('treeObj') public treeObj: TreeViewComponent;\n    @ViewChild('tabObj') public tabObj: TabComponent;\n    @ViewChild('GridtemplateRef', { static: true }) public Gridtemplate: TemplateRef<any>;\n    @ViewChild('CharttemplateRef', { static: true }) public Charttemplate: TemplateRef<any>;\n    @ViewChild('ScheduletemplateRef', { static: true }) public Scheduletemplate: TemplateRef<any>;\n    @ViewChild('DropDowntemplateRef', { static: true }) public DropDowntemplate: TemplateRef<any>;\n    @ViewChild('DatePickertemplateRef', { static: true }) public DatePickertemplate: TemplateRef<any>;\n    @ViewChild('UploadtemplateRef', { static: true }) public Uploadtemplate: TemplateRef<any>;\n    @ViewChild('CalendartemplateRef', { static: true }) public Calendartemplate: TemplateRef<any>;\n\n    public draggedItemHeader: string = '';\n    public i: number;\n\n    public headerText: Object = [{ text: 'Grid' }, { text: 'Chart' }, { text: 'Schedule' }];\n\n    public field: Object = {\n        dataSource: [\n            { text: \"DropDown List\", id: \"list-01\" },\n            { text: \"DatePicker\", id: \"list-02\" },\n            { text: \"Calendar\", id: \"list-03\" },\n            { text: \"File Upload\", id: \"list-04\" },\n        ],\n        id: \"id\", text: \"text\"\n    }\n    public sportsData: Object[] = [\n        { Id: 'Game1', Game: 'American Football' },\n        { Id: 'Game2', Game: 'Badminton' },\n        { Id: 'Game3', Game: 'Basketball' },\n        { Id: 'Game4', Game: 'Cricket' },\n        { Id: 'Game5', Game: 'Football' },\n        { Id: 'Game6', Game: 'Golf' },\n        { Id: 'Game7', Game: 'Hockey' },\n        { Id: 'Game8', Game: 'Rugby' },\n        { Id: 'Game9', Game: 'Snooker' },\n        { Id: 'Game10', Game: 'Tennis' }\n    ];\n    public fields: Object = { text: 'Game', value: 'Id' };\n    public value: string = 'Game3';\n\n    public allowDragAndDrop: boolean = true;\n    public gridData: Object[] = [\n        { OrderID: 10248, CustomerID: \"VINET\", OrderDate: new Date(8364186e5), Freight: 32.38 },\n        { OrderID: 10249, CustomerID: \"TOMSP\", OrderDate: new Date(836505e6), Freight: 11.61 },\n        { OrderID: 10250, CustomerID: \"HANAR\", OrderDate: new Date(8367642e5), Freight: 65.83 },\n        { OrderID: 10251, CustomerID: \"VICTE\", OrderDate: new Date(8367642e5), Freight: 41.34 },\n        { OrderID: 10252, CustomerID: \"SUPRD\", OrderDate: new Date(8368506e5), Freight: 51.3 }\n    ];\n\n    public primaryXAxis: Object = { valueType: 'Category' };\n    public chartData: Object = [\n        { month: 'Jan', sales: 35 }, { month: 'Feb', sales: 28 },\n        { month: 'Mar', sales: 34 }, { month: 'Apr', sales: 32 },\n        { month: 'May', sales: 40 }, { month: 'Jun', sales: 32 },\n        { month: 'Jul', sales: 35 }, { month: 'Aug', sales: 55 },\n        { month: 'Sep', sales: 38 }, { month: 'Oct', sales: 30 },\n        { month: 'Nov', sales: 25 }, { month: 'Dec', sales: 32 }\n    ];\n\n    public selectedDate: Date = new Date(2020, 9, 20);\n    public readonly: boolean = true;\n    private dataManger: DataManager = new DataManager({\n        url: \"https://ej2services.syncfusion.com/production/web-services/api/Schedule\",\n        adaptor: new ODataV4Adaptor(),\n        crossDomain: true\n    });\n    public eventSettings: EventSettingsModel = { dataSource: this.dataManger };\n\n    onNodeDrag(args: DragAndDropEventArgs): void {\n        if (!isNullOrUndefined(args.target.closest('.tab-content'))) {\n            args.dropIndicator = 'e-no-drop';\n        } else if (!isNullOrUndefined(args.target.closest('.e-tab-header'))) {\n            args.dropIndicator = 'e-drop-in';\n        }\n    }\n    onNodeDragStop(args: DragAndDropEventArgs): void {\n        let dropElement = args.target.closest(\".e-toolbar-item\");\n        if (dropElement != null) {\n            let tabElement = document.querySelector(\"#draggableTab\");\n            let dropItemIndex = [].slice.call(tabElement.querySelectorAll(\".e-toolbar-item\")).indexOf(dropElement);\n            let tabContent;\n            switch (args.draggedNodeData.text) {\n                case \"DropDown List\":\n                    tabContent = this.DropDowntemplate;\n                    break;\n                case \"DatePicker\":\n                    tabContent = this.DatePickertemplate;\n                    break;\n                case \"Calendar\":\n                    tabContent = this.Calendartemplate\n                    break;\n                case \"File Upload\":\n                    tabContent = this.Uploadtemplate\n                    break;\n                case \"Chart\":\n                    tabContent = this.Charttemplate;\n                    break;\n                case \"Grid\":\n                    tabContent = this.Gridtemplate;\n                    break;\n                case \"Schedule\":\n                    tabContent = this.Scheduletemplate;\n                    break;\n                default:\n                    break;\n            }\n            let newTabItem = [{ header: { text: args.draggedNodeData.text.toString() }, content: tabContent }];\n\n            this.tabObj.addTab(newTabItem, dropItemIndex);\n            this.treeObj.removeNodes([args.draggedNode]);\n            args.cancel = true;\n        } else {\n            let dropNode = args.target.closest(\".e-list-item \");\n            if (!isNullOrUndefined(dropNode) && args.dropIndicator === \"e-drop-in\") {\n                args.cancel = true;\n            }\n        }\n\n    }\n    onTabCreate(): void {\n        let tabElement = document.getElementById(\"#draggableTab\");\n        if (!isNullOrUndefined(tabElement)) {\n            tabElement.querySelector(\".e-tab-header\").classList.add(\"e-droppable\");\n            tabElement.querySelector(\".e-content\").classList.add(\"tab-content\");\n        }\n    }\n    onTabDragStart(args: DragEventArgs): void {\n        this.draggedItemHeader = <string>this.tabObj.items[args.index].header.text;\n    }\n    onDraggedTab(args: DragEventArgs): void {\n        let dragTabIndex: number = Array.prototype.indexOf.call(this.tabObj.element.querySelectorAll('.e-toolbar-item'), args.draggedItem);\n        let dropNode: HTMLElement = <HTMLElement>args.target.closest('.e-list-item');\n        if (!args.target.closest('.e-toolbar-item')) {\n            args.cancel = true;\n            let dropContainer: NodeListOf<Element> = (document.querySelector('.treeview-external-drag-tab')).querySelectorAll('.e-list-item');\n            let dropIndex: number = Array.prototype.indexOf.call(dropContainer, dropNode);\n            let newNode: { [key: string]: Object }[] = [{ id: 'list' + this.i, text: this.draggedItemHeader }];\n            this.tabObj.removeTab(dragTabIndex);\n            this.treeObj.addNodes(newNode, 'Treeview', dropIndex);\n        }\n    }\n}","app/app.module.ts":"import { ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { CalendarAllModule, DateRangePickerAllModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { ScheduleAllModule } from '@syncfusion/ej2-angular-schedule';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { AutoCompleteAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { NumericTextBoxAllModule, UploaderAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DatePickerAllModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { TabAllModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, NumericTextBoxAllModule, TabAllModule, GridAllModule, DialogAllModule, DatePickerAllModule, DropDownListModule, AutoCompleteAllModule, ScheduleAllModule, RichTextEditorAllModule, UploaderAllModule, CalendarAllModule, DateRangePickerAllModule, ChartAllModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<ng-template #GridtemplateRef>\n    <ejs-grid [dataSource]='gridData'>\n        <e-columns>\n            <e-column field='OrderID' headerText='Order ID' textAlign='Right' width=120 type='number'></e-column>\n            <e-column field='CustomerID' headerText='Customer ID' type='string' width=140>\n            </e-column>\n            <e-column field='Freight' headerText='Freight' textAlign='Right' width=120 format='C'>\n            </e-column>\n            <e-column field='OrderDate' headerText='Order Date' width=140 format='yMd'></e-column>\n        </e-columns>\n    </ejs-grid>\n</ng-template>\n\n<ng-template #CharttemplateRef>\n    <ejs-chart id=\"chart-container\" [primaryXAxis]='primaryXAxis'>\n        <e-series-collection>\n            <e-series [dataSource]='chartData' type='Line' xName='month' yName='sales' name='Sales'></e-series>\n        </e-series-collection>\n    </ejs-chart>\n</ng-template>\n<ng-template #ScheduletemplateRef>\n    <ejs-schedule height='350px' [selectedDate]='selectedDate' [eventSettings]='eventSettings' [readonly]=\"readonly\">\n    </ejs-schedule>\n</ng-template>\n\n<ng-template #DropDowntemplateRef>\n    <ejs-dropdownlist [dataSource]='sportsData' width='200px' [value]='value' [fields]='fields'></ejs-dropdownlist>\n</ng-template>\n<ng-template #DatePickertemplateRef>\n    <ejs-datepicker width='200px'></ejs-datepicker>\n</ng-template>\n\n<ng-template #UploadtemplateRef>\n    <ejs-uploader></ejs-uploader>\n</ng-template>\n\n<ng-template #CalendartemplateRef>\n    <ejs-calendar></ejs-calendar>\n</ng-template>\n\n<div id=\"TabContainer\">\n    <div class=\"col-lg-4\" style=\"margin-top: 10px;\">\n        <div class='property-panel-header'>List of Components</div>\n        <ejs-treeview #treeObj dragArea='#TabContainer' [fields]='field' cssClass='treeview-external-drag-tab'\n            [allowDragAndDrop]='allowDragAndDrop' (nodeDragStop)='onNodeDragStop($event)'\n            (nodeDragging)='onNodeDrag($event)'>\n        </ejs-treeview>\n    </div>\n    <div class=\"col-lg-8 content-wrapper control-section\">\n        <ejs-tab id='draggableTab' #tabObj [allowDragAndDrop]='allowDragAndDrop' dragArea='#TabContainer'\n            (created)='onTabCreate()' (onDragStart)='onTabDragStart($event)' (dragged)='onDraggedTab($event)'>\n            <e-tabitems>\n                <e-tabitem [header]='headerText[0]' [content]=\"Gridtemplate\">\n                </e-tabitem>\n                <e-tabitem [header]='headerText[1]' [content]=\"Charttemplate\">\n                </e-tabitem>\n                <e-tabitem [header]='headerText[2]' [content]=\"Scheduletemplate\">\n                </e-tabitem>\n            </e-tabitems>\n        </ejs-tab>\n    </div>\n\n</div>","app.component.css":"#draggableTab .e-content .e-item {\n    font-size: 12px;\n    padding: 10px;\n    text-align: justify;\n}\n#draggableTab .e-upload {\n    width: 300px;\n}\n#TabContainer .e-treeview .e-ul {\n    padding: 0 0 0 36px !important;\n}\n#TabContainer .property-panel-header {\n    text-align: center;\n}\n.treeview-external-drag-tab .e-list-item,\n.e-bigger .treeview-external-drag-tab .e-list-item {\n    background: white;\n    border: 0.5px solid #E1E7EC;\n    line-height: 15px;\n    padding: 0 5px;\n}\n.treeview-external-drag-tab .e-list-item.e-hover>.e-fullrow,\n.treeview-external-drag-tab .e-list-item.e-active>.e-fullrow,\n.treeview-external-drag-tab .e-list-item.e-active.e-hover>.e-fullrow,\n.e-bigger .treeview-external-drag-tab .e-list-item.e-hover>.e-fullrow,\n.e-bigger .treeview-external-drag-tab .e-list-item.e-active>.e-fullrow,\n.e-bigger .treeview-external-drag-tab .e-list-item.e-active.e-hover>.e-fullrow {\n    background-color: transparent;\n    border-color: transparent;\n    box-shadow: none !important;\n}\n"}